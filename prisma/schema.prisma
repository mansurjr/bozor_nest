generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USERS ====================

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  password         String
  firstName        String?
  lastName         String?
  role             Roles      @default(CHECKER)
  isActive         Boolean    @default(true)
  refreshToken     String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  createdContracts Contract[]
  createdOwners    Owner[]
  Section          Section[]
}

// ==================== OWNERS ====================

model Owner {
  id          Int        @id @default(autoincrement())
  fullName    String
  address     String?
  tin         String     @unique
  phoneNumber String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById Int
  createdBy   User       @relation(fields: [createdById], references: [id])
  contracts   Contract[]
}

// ==================== STORES ====================

model Store {
  id                Int        @id @default(autoincrement())
  storeNumber       String     @unique
  area              Float
  click_payment_url String?
  payme_payment_url String?
  description       String?
  contracts         Contract[]
  sectionId         Int?

  Section Section? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
}

// ==================== STALLS ====================

model Stall {
  id                Int          @id @default(autoincrement())
  area              Float
  saleTypeId        Int?
  sectionId         Int?
  click_payment_url String?
  payme_payment_url String?
  description       String?
  dailyFee          Decimal
  attendances       Attendance[]
  SaleType          SaleType?    @relation(fields: [saleTypeId], references: [id])
  Section           Section?     @relation(fields: [sectionId], references: [id])
}

// ==================== CONTRACTS ====================

model Contract {
  id                Int           @id @default(autoincrement())
  certificateNumber String?
  issueDate         DateTime?
  expiryDate        DateTime?
  isActive          Boolean       @default(true)
  shopMonthlyFee    Decimal?
  ownerId           Int
  storeId           Int
  createdById       Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdBy         User          @relation(fields: [createdById], references: [id])
  owner             Owner         @relation(fields: [ownerId], references: [id])
  store             Store         @relation(fields: [storeId], references: [id])
  transactions      Transaction[]
}

// ==================== ATTENDANCE ====================

model Attendance {
  id            Int               @id @default(autoincrement())
  date          DateTime          @db.Date
  stallId       Int
  status        AttendancePayment @default(UNPAID)
  amount        Decimal?          @default(0)
  transactionId Int?              @unique
  transaction   Transaction?      @relation("AttendanceTransaction")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Stall     Stall     @relation(fields: [stallId], references: [id])

  @@unique([stallId, date])
}

// ==================== TRANSACTIONS ====================

model Transaction {
  id            Int           @id @default(autoincrement())
  transactionId String        @unique
  amount        Decimal
  status        String        @default("PENDING")
  paymentMethod PaymentMethod @default(CASH)
  contractId    Int?
  attendanceId  Int?          @unique
  attendance    Attendance?   @relation("AttendanceTransaction", fields: [attendanceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  contract  Contract? @relation(fields: [contractId], references: [id])
}

model ClickTransaction {
  id              Int      @id @default(autoincrement())
  clickTransId    String   @unique
  clickPaydocId   String?
  merchantTransId String
  amount          Decimal
  action          Int
  signTime        DateTime
  status          Int      @default(0)
  error           Int      @default(0)
  errorNote       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ==================== SUPPORT TABLES ====================

model SaleType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  tax         Float
  Stall       Stall[]
}

model Section {
  id                Int     @id @default(autoincrement())
  name              String
  description       String?
  assignedCheckerId Int
  assignedChecker   User    @relation(fields: [assignedCheckerId], references: [id])
  Stall             Stall[]
  Store             Store[]
}

// ==================== ENUMS ====================

enum PaymentMethod {
  PAYME
  CLICK
  CASH
}

enum AttendancePayment {
  PAID
  UNPAID
}

enum Roles {
  ADMIN
  CHECKER
  SUPERADMIN
}
